package edu.xtec.qv.applet;

/*
 * QVDrawer.java
 *
 * Created on 19 de enero de 2006, 22:47
 */

import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Point;
import java.awt.event.ActionEvent;

import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ImageIcon;

/**
 *
 * @author  Albert
 */
public class QVDrawer extends QVAppletJS{
	
	public static final int NO_TOOL=0;
	public static final int LINE_TOOL=1;
	public static final int RECTANGLE_TOOL=2;
	public static final int ELLIPSE_TOOL=3;
	public static final int PENCIL_TOOL=4;
	public static final int DELETE_TOOL=5;
	public static final int PAINT_TOOL=6;
	
	Displayer pissarra = null;
	boolean isEditable = true;
	QVShapeAspect currentAspect = null;
	int currentTool = NO_TOOL;
	
	private final Color initialColor = Color.black;
	private final int initialStroke = 2;
	private int numColors = 8;
	
	private boolean imageLoaded = false;
	
	/** Creates new form QVDrawer */
	public QVDrawer() {
		javax.swing.ToolTipManager.sharedInstance().setLightWeightPopupEnabled(false);
		//setSize(800,500);
	}
	
	public String getStringRepresentation(){
		String s=pissarra.getStringSVG();
		try{
			s = java.net.URLEncoder.encode(s, "UTF-8");
		} catch (Exception e){
			e.printStackTrace(System.out);
		}
		return s;
	}
	
	public void init(){
		String sNumColors=getParameter("num_colors");
		//System.out.println("colors="+sNumColors);
		try{
			if (sNumColors!=null && sNumColors.trim().length()>0)
				numColors=Math.max(1,Integer.parseInt(sNumColors));
		} catch (Exception e){
			System.out.println("Format erroni en el número de colors:"+sNumColors);
		}
		
		initComponents();
		pissarra=new Displayer(this);
		pissarra.setBackground(Color.white);
		javax.swing.JPanel jp = new javax.swing.JPanel();
		jp.setLayout(new BorderLayout());
		jp.add(pissarra, BorderLayout.CENTER);
		getContentPane().add(jp, BorderLayout.CENTER);
		
		String sDisabled=getParameter("disabled");
		if (sDisabled!=null && sDisabled.trim().toLowerCase().equals("true")) {
			isEditable=false;
			jToolBar1.setEnabled(false);
			jToolBar1.setVisible(false);
			setCurrentTool(NO_TOOL);
		}
		urlQuadernBase=getParameter("url_base");
		String img_url=getParameter("image_src");
		String serverUrl=getParameter("serverUrl");
		
		initDrawer();
		super.init();
		try{
			if (img_url!=null && img_url.trim().length()>0)
				setBackgroundImage(getResourceURL(img_url, serverUrl));
		}	catch (Exception e){
			e.printStackTrace(System.out);
		}
	}
	
	public void selectInitialResponses(String param){
		System.out.println("selectInitialResponses-> "+param);
		initFromParam(param);
		//repaint();
	}
	
	public boolean initFromParam(String param){
		try{
			if (param!=null && param.trim().length()>0){
				param = java.net.URLDecoder.decode(param, "UTF-8");
				//System.out.println("INITPARAM: "+param);
				pissarra.addShapesFromSVG(param);
			} 
		}
		catch (Exception e){
			e.printStackTrace(System.out);
		}
		return true;
	}
	
	private void initDrawer(){
		initTool();
		initAspect();
	}
	
	private void initTool(){
		btPencil.setSelected(true);
		setCurrentTool(PENCIL_TOOL);
	}
	
	private void initAspect(){
		Color c = initialColor;
		setCurrentAspect(new QVShapeAspect(c, null, new BasicStroke(initialStroke)));
	}
	
	public void setColor(Color c){
		currentAspect.setColor(c);
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	private void initComponents() {//GEN-BEGIN:initComponents
		bg = new javax.swing.ButtonGroup();
		jToolBar1 = new javax.swing.JToolBar();
//		/        jToolBar1 = new javax.swing.JMenuBar();
		Dimension d1 = new Dimension(10,32);
		jSeparator1 = new javax.swing.JSeparator();
		jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
		jSeparator1.setMaximumSize(d1);
		jSeparator1.setPreferredSize(d1);
		jSeparator2 = new javax.swing.JSeparator();
		jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
		jSeparator2.setMaximumSize(d1);
		jSeparator2.setPreferredSize(d1);
		jSeparator3 = new javax.swing.JSeparator();
		jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
		jSeparator3.setMaximumSize(d1);
		jSeparator3.setPreferredSize(d1);
		jSeparator4 = new javax.swing.JSeparator();
		jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);
		jSeparator4.setMaximumSize(d1);
		jSeparator4.setPreferredSize(d1);
		jSeparator5 = new javax.swing.JSeparator();
		jSeparator5.setOrientation(javax.swing.SwingConstants.VERTICAL);
		
		Action actionDeleteAll = new AbstractAction("Nou dibuix", new ImageIcon(getResourceURL("icons/new.gif"))) {
			public void actionPerformed(ActionEvent evt) {
				btDeleteAllActionPerformed(evt);
			}
		};
		btDeleteAll = new SmallButton(actionDeleteAll, "Nou dibuix");
		jToolBar1.add(btDeleteAll);
		
		jToolBar1.add(jSeparator1);
		
		
		btPencil = new SmallToggleButton(false, new ImageIcon(getResourceURL("icons/pencil.gif")), null, "Llapis");
		bg.add(btPencil);
		btPencil.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btPencilActionPerformed(evt);
			}
		});
		jToolBar1.add(btPencil);
		
		btLine = new SmallToggleButton(false, new ImageIcon(getResourceURL("icons/line.gif")), null, "Línia recta");
		bg.add(btLine);
		btLine.setIcon(new ImageIcon(getResourceURL("icons/line.gif")));
		btLine.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btLineActionPerformed(evt);
			}
		});
		jToolBar1.add(btLine);
		
		btRectangle = new SmallToggleButton(false, new ImageIcon(getResourceURL("icons/rectangle.gif")), null, "Rectangle");
		bg.add(btRectangle);
		btRectangle.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btRectangleActionPerformed(evt);
			}
		});
		jToolBar1.add(btRectangle);
		
		btEllipse = new SmallToggleButton(false, new ImageIcon(getResourceURL("icons/ellipse.gif")), null, "El\u00b7lipse");
		bg.add(btEllipse);
		btEllipse.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btEllipseActionPerformed(evt);
			}
		});
		jToolBar1.add(btEllipse);
		
		
		btDelete = new SmallToggleButton(false, new ImageIcon(getResourceURL("icons/delete.gif")), null, "Esborra");
		bg.add(btDelete);
		btDelete.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btDeleteActionPerformed(evt);
			}
		});
		jToolBar1.add(btDelete);
		
		btPaint = new SmallToggleButton(false, new ImageIcon(getResourceURL("icons/paint.gif")), null, "Pinta/omple de color");
		bg.add(btPaint);
		btPaint.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btPaintActionPerformed(evt);
			}
		});
		jToolBar1.add(btPaint);
		
		jToolBar1.add(jSeparator2);
		
		
		
		
		Action actionUndo = new AbstractAction("undo", new ImageIcon(getResourceURL("icons/edit_undo.gif"))) {
			public void actionPerformed(ActionEvent evt) {
				btUndoActionPerformed(evt);
			}
		};
		btUndo = new SmallButton(actionUndo, "Desfés");
		jToolBar1.add(btUndo);
		
		Action actionRedo = new AbstractAction("redo", new ImageIcon(getResourceURL("icons/edit_redo.gif"))) {
			public void actionPerformed(ActionEvent evt) {
				btRedoActionPerformed(evt);
			}
		};
		btRedo = new SmallButton(actionRedo, "Refés");
		jToolBar1.add(btRedo);
		
		jToolBar1.add(jSeparator3);
		
		colorToolBar = new QVColorToolBar(this, jToolBar1, initialColor, numColors);
		
		jToolBar1.add(jSeparator4);
		
		bgStroke = new javax.swing.ButtonGroup();
		for (int i=0;i<4;i++){
			SmallStrokeToggleButton bt = new SmallStrokeToggleButton(((i+1)*2)==initialStroke, null, null, "Pinta amb aquest gruix", (i+1)*2);
			bgStroke.add(bt);
			bt.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					int stroke = ((SmallStrokeToggleButton)evt.getSource()).getStroke();
					currentAspect.setStroke(new BasicStroke(stroke));
				}
			});
			jToolBar1.add(bt);
		}
		
		jToolBar1.add(jSeparator5);
		
		getContentPane().add(jToolBar1, java.awt.BorderLayout.NORTH);
	}//GEN-END:initComponents
	
	private void setCurrentTool(int newTool){
		currentTool = newTool;
	}
	
	public int getCurrentTool(){
		return currentTool;
	}
	
	private void setCurrentAspect(QVShapeAspect aspect){
		currentAspect = aspect;
	}
	
	public QVShapeAspect getCurrentAspect(){
		return currentAspect;
	}
	
	private void btRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRedoActionPerformed
		pissarra.redo();
	}//GEN-LAST:event_btRedoActionPerformed
	
	private void btUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUndoActionPerformed
		pissarra.undo();
	}//GEN-LAST:event_btUndoActionPerformed
	
	private void btDeleteAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeleteAllActionPerformed
		if (pissarra.getNumShapes()>0){
			int resposta = javax.swing.JOptionPane.showConfirmDialog(this, "Estàs segur que vols iniciar un dibuix nou i esborrar l'actual?", "Nou dibuix", javax.swing.JOptionPane.YES_NO_OPTION); 
			if (resposta == javax.swing.JOptionPane.YES_OPTION){
				pissarra.removeAllQVShapes();
				initTool();
			}
		}
	}//GEN-LAST:event_btDeleteAllActionPerformed
	
	private void btLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRectangleActionPerformed
		setCurrentTool(LINE_TOOL);
	}//GEN-LAST:event_btRectangleActionPerformed
	
	private void btRectangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRectangleActionPerformed
		setCurrentTool(RECTANGLE_TOOL);
	}//GEN-LAST:event_btRectangleActionPerformed
	
	private void btEllipseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRectangleActionPerformed
		setCurrentTool(ELLIPSE_TOOL);
	}//GEN-LAST:event_btRectangleActionPerformed
	
	private void btPencilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRectangleActionPerformed
		setCurrentTool(PENCIL_TOOL);
	}//GEN-LAST:event_btRectangleActionPerformed
	
	private void btPaintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRectangleActionPerformed
		setCurrentTool(PAINT_TOOL);
	}//GEN-LAST:event_btRectangleActionPerformed
	
	private void btDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeleteActionPerformed
		setCurrentTool(DELETE_TOOL);
	}//GEN-LAST:event_btDeleteActionPerformed
	
	public java.net.URL getResourceURL(String name) {
		java.net.URL result=null;
		try{
			result=getClass().getResource("/edu/xtec/resources/"+name);
			if(result==null)
				result=getClass().getResource(name);
		}catch (Exception e){
			e.printStackTrace();
		}
		return result;
	}
	
	public void setCanUndo(boolean b){
		btUndo.setEnabled(b);
	}
	
	public void setCanRedo(boolean b){
		btRedo.setEnabled(b);
	}
	
	public void setBackgroundImage(java.net.URL imgUrl){
		//if (img_url!=null && img_url.startsWith("/")) img_url=(getDocumentBase()+img_url);
		System.out.println("setBackgroundImage-> image="+imgUrl);
		if (imgUrl!=null){
			final Image i=getImage(imgUrl);
			ImageThread it = new ImageThread(i);
			it.start();
		}
	}
	
	private class ImageThread extends Thread{
		int j=1;
		Image i;
		
		public ImageThread(Image i){
			this.i=i;
		}
		
		public void run() {
			/* Si es fa reload quan encara no s'ha acabat de carregar la imatge, ja
			 no es torna a invocar a imageUpdate quan la imatge està carregada (BUG?), per això
			 monto un Thread que mentre la imatge no estigui carregada intenta mostrar-la.
			 Amb el codi que hi ha dins de if (j==1) hauria d'haver prou en circunstancies
			 normals. */
			System.out.println("run-> "+i);
			imageLoaded = false;
			while (!imageLoaded){
				i.flush();
				if (j==1){
					i.getWidth(new java.awt.image.ImageObserver(){
						public boolean imageUpdate(Image img, int infoflags, int x, int y, int width, int height) {
							//System.out.println("imageUpdate w:"+width+" h:"+height);
							if (width>1 && height>1){
								reescaleImage(i, width, height);
								repaint(0);
							}
							return (width>1 && height>1);
						}
					});
				} else{
					int w=i.getWidth(null);
					int h=i.getHeight(null);
					reescaleImage(i, w, h);
					repaint(0);
				}
				try{
					if (!imageLoaded)
						Thread.currentThread().sleep(2000);
				} catch(Exception e){}
				j++;
			}
		}			
	}
	
	private void reescaleImage(Image i, int width, int height){
		imageLoaded = true;
		int w = getWidth(); //pissarra.getWidth()
		int h = getHeight()-36; //pissarra.getHeight();
		if (i!=null && width>0 && height>0 && (width>w || height>h)){
			if (width>w && height>h){
				if (((float)width/(float)w)>((float)height/(float)h))
					i=i.getScaledInstance(w, -1, Image.SCALE_DEFAULT);
				else
					i=i.getScaledInstance(-1, h, Image.SCALE_DEFAULT); 
			} else if (width>getWidth()){
				i=i.getScaledInstance(w, -1, Image.SCALE_DEFAULT);  
			} else if (height>getHeight()){
				i=i.getScaledInstance(-1, h, Image.SCALE_DEFAULT);  
			}
		}    	
		pissarra.setBackgroundImage(i);
		System.out.println("-fi-");
		//System.out.println("i.getWidth(this)="+i.getWidth(this)+" i.getHeight(this)="+i.getHeight(this)+" w="+getWidth()+" h="+getHeight()+" width:"+width+" height:"+height);
	}
	
	
	private java.awt.Cursor getCursor(String name, int x, int y){
		Cursor c = null;
		java.net.URL u=getResourceURL("cursors/"+name);
		if (u!=null){
			java.awt.Image cursor = getImage(u);
			c = java.awt.Toolkit.getDefaultToolkit().createCustomCursor(cursor, new Point(x,y) , "Rotació");
		}
		return c;
	}
	
	public java.awt.Cursor getPaintCursor(){
		paintCursor = (paintCursor==null)?getCursor("paintCursor.gif",9,22):paintCursor;
		return paintCursor;
	}
	
	public java.awt.Cursor getDrawCursor(){
		drawCursor = (drawCursor==null)?getCursor("drawCursor.gif",9,20):drawCursor;
		return drawCursor;
	}
	
	
	/**
	 * @param args the command line arguments
	 */
	/*public static void main(String args[]) {
	 java.awt.EventQueue.invokeLater(new Runnable() {
	 public void run() {
	 QVDrawer qvDrawer = new QVDrawer();
	 qvDrawer.setVisible(true);
	 qvDrawer.loadFromFile();
	 qvDrawer.setBackgroundImage(qvDrawer.getResourceURL("platja_hospi_inf_nit.jpg"));
	 //qvDrawer.setBackgroundImage(qvDrawer.getResourceURL("fontana2.jpg"));
	  }
	  });
	  }*/
	
	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.ButtonGroup bg;
	private javax.swing.ButtonGroup bgColor;
	private javax.swing.ButtonGroup bgStroke;
	private javax.swing.JToggleButton btDelete;
	private javax.swing.JButton btDeleteAll;
	private javax.swing.JToggleButton btEllipse;
	private javax.swing.JToggleButton btLine;
	private javax.swing.JToggleButton btPaint;
	private javax.swing.JToggleButton btPencil;
	private javax.swing.JToggleButton btRectangle;
	private javax.swing.JButton btRedo;
	private javax.swing.JButton btUndo;
	
	private QVColorToolBar colorToolBar;
	private javax.swing.JSeparator jSeparator1;
	private javax.swing.JSeparator jSeparator2;
	private javax.swing.JSeparator jSeparator3;
	private javax.swing.JSeparator jSeparator4;
	private javax.swing.JSeparator jSeparator5;
	private javax.swing.JToolBar jToolBar1;
	
	private static java.awt.Cursor paintCursor = null;
	private static java.awt.Cursor drawCursor = null;
	
}
