/*
 * ConfigQuadernTestDialog.java
 *
 * Created on 15 / maig / 2003, 11:22
 */

package edu.xtec.qv.editor.ui;

import edu.xtec.qv.editor.util.ConfigQuadernTest;
import edu.xtec.qv.qti.util.ObjectListElement;
import edu.xtec.qv.util.QuadernConfig;
import edu.xtec.qv.util.Utility;

/**
 *
 * @author  allastar
 */
public class ConfigQuadernTestDialog extends javax.swing.JDialog {
    
    /** Creates new form ConfigQuadernTestDialog */
    public ConfigQuadernTestDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        initComponents2();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jpCenter = new javax.swing.JPanel();
        cbCorrect = new javax.swing.JCheckBox();
        lbMax1 = new javax.swing.JLabel();
        cbMax = new javax.swing.JComboBox();
        cbResponse = new javax.swing.JCheckBox();
        cbAutoAdvance = new javax.swing.JCheckBox();
        cbWriting = new javax.swing.JCheckBox();
        lbQuadernXSL1 = new javax.swing.JLabel();
        cbQuadernXSL = new javax.swing.JComboBox();
        cbShowAllways = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        btAccept = new javax.swing.JButton();
        btCancel = new javax.swing.JButton();

        getContentPane().setLayout(new java.awt.BorderLayout(0, 30));

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jpCenter.setLayout(new java.awt.GridBagLayout());

        cbCorrect.setText("Correcci\u00f3 autom\u00e0tica");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 6, 2, 6);
        jpCenter.add(cbCorrect, gridBagConstraints);

        lbMax1.setText("M\u00e0xim lliuraments");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 2);
        jpCenter.add(lbMax1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 5);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jpCenter.add(cbMax, gridBagConstraints);

        cbResponse.setText("Resposta obligat\u00f2ria");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 6, 2, 6);
        jpCenter.add(cbResponse, gridBagConstraints);

        cbAutoAdvance.setText("Avan\u00e7ar autom\u00e0ticament");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 6, 2, 6);
        jpCenter.add(cbAutoAdvance, gridBagConstraints);

        cbWriting.setText("Permetre anotacions");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 6, 2, 6);
        jpCenter.add(cbWriting, gridBagConstraints);

        lbQuadernXSL1.setText("Aspecte");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 2);
        jpCenter.add(lbQuadernXSL1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 5);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jpCenter.add(cbQuadernXSL, gridBagConstraints);

        cbShowAllways.setText("Mostrar sempre abans de provar quadern");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(19, 6, 6, 6);
        jpCenter.add(cbShowAllways, gridBagConstraints);

        getContentPane().add(jpCenter, java.awt.BorderLayout.CENTER);

        btAccept.setText("Acceptar");
        btAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAcceptActionPerformed(evt);
            }
        });

        jPanel1.add(btAccept);

        btCancel.setText("Cancelar");
        btCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelActionPerformed(evt);
            }
        });

        jPanel1.add(btCancel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        pack();
    }//GEN-END:initComponents

    private void btCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelActionPerformed
        // Add your handling code here:
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btCancelActionPerformed

    private void btAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAcceptActionPerformed
        // Add your handling code here:
        confirmChanges();
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btAcceptActionPerformed

    protected void confirmChanges(){
        ConfigQuadernTest.setAutoCorrect(cbCorrect.isSelected());
        ConfigQuadernTest.setAutoAdvance(cbAutoAdvance.isSelected());
        ConfigQuadernTest.setMandatoryResponse(cbResponse.isSelected());
        ConfigQuadernTest.setWritingEnabled(cbWriting.isSelected());
        ConfigQuadernTest.setShowAllways(cbShowAllways.isSelected());
        try{
            ConfigQuadernTest.setQuadernXSL(cbQuadernXSL.getSelectedItem().toString());
            Object o=cbMax.getSelectedItem();
            if (o!=null && o instanceof ObjectListElement)
                ConfigQuadernTest.setMaxResponses(((ObjectListElement)o).getId());
            else if (o!=null)
                ConfigQuadernTest.setMaxResponses(Integer.parseInt(o.toString()));
        }
        catch (Exception e){
        }
    }
    
    protected void initComponents2(){
        //cbMax=new javax.swing.JComboBox();
        cbMax.addItem(new ObjectListElement(-1,"Sense límit"));
        for (int i=1;i<10;i++) cbMax.addItem(new ObjectListElement(i,i+""));
        for (int i=1;i<10;i++) cbMax.addItem(new ObjectListElement(i*10,(i*10)+""));
        
        //cbQuadernXSL=new javax.swing.JComboBox();
        java.util.HashMap hm=QuadernConfig.getPossibleXSLQuadern();
        if (hm!=null){
            java.util.Iterator it=hm.keySet().iterator();
            while (it.hasNext()){
                Object o=it.next();
                cbQuadernXSL.addItem(o);
            }
        }
        
        cbCorrect.setSelected(ConfigQuadernTest.isAutoCorrect());
        cbAutoAdvance.setSelected(ConfigQuadernTest.isAutoAdvance());
        cbResponse.setSelected(ConfigQuadernTest.isMandatoryResponse());
        cbWriting.setSelected(ConfigQuadernTest.isWritingEnabled());
        Utility.setOption(cbMax,ConfigQuadernTest.getMaxResponses()+"");
        Utility.setOption(cbQuadernXSL,ConfigQuadernTest.getQuadernXSL());
        cbShowAllways.setSelected(ConfigQuadernTest.getShowAllways());
    }
        
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog
    
    /**
     * @param args the command line arguments
     */
    /*public static void main(String args[]) {
        new ConfigQuadernTestDialog(new javax.swing.JFrame(), true).show();
    }*/
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cbWriting;
    private javax.swing.JCheckBox cbCorrect;
    private javax.swing.JButton btAccept;
    private javax.swing.JButton btCancel;
    private javax.swing.JLabel lbQuadernXSL1;
    private javax.swing.JComboBox cbMax;
    private javax.swing.JCheckBox cbAutoAdvance;
    private javax.swing.JComboBox cbQuadernXSL;
    private javax.swing.JPanel jpCenter;
    private javax.swing.JCheckBox cbShowAllways;
    private javax.swing.JCheckBox cbResponse;
    private javax.swing.JLabel lbMax1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
    
}
