/*
 * QTIItemSelectionResponsesPanel.java
 *
 * Created on 6 de octubre de 2002, 17:30
 */

package edu.xtec.qv.editor.ui;

import edu.xtec.qv.editor.ManageFrame;
import edu.xtec.qv.qti.QTIItemSelectionResponses;
import edu.xtec.qv.qti.QTISelectionResponse;
import edu.xtec.qv.qti.util.CreatorProperties;
import edu.xtec.util.Messages;

/**
 *
 * @author  Albert
 * @version
 */
public class QTIItemSelectionResponsesPanel extends javax.swing.JPanel implements ExtendedRenderer{
    
    protected QTIItemSelectionResponses qtiItemSelResp;
    
    /** Creates new form QTIItemSelectionResponsesPanel */
    public QTIItemSelectionResponsesPanel(QTIItemSelectionResponses qtiItemSelResp, java.util.Vector vSelectionResponses) {
        this.qtiItemSelResp=qtiItemSelResp;
        initComponents();
        initComponents2(vSelectionResponses);
        //! creator.QTISelectionResponse newSelResp=new creator.QTISelectionResponse(qtiItemSelResp);
        //! setSelectionResponse(newSelResp);
        if (CreatorProperties.getBackground()!=null || CreatorProperties.getComponentColor()!=null) setBackground(CreatorProperties.getBackground());
        initMessages();
    }
    
    public void setMultiple(boolean bMultiple){
        cbMultiple.setSelected(bMultiple);
    }
    
    public boolean getMultiple(){
        return cbMultiple.isSelected();
    }
    
    public void setFlow(boolean bFlow){
        cbFlow.setSelected(bFlow);
    }
    
    public boolean getFlow(){
        return cbFlow.isSelected();
    }
    
    public void setList(boolean bList){
        cbDisplayList.setSelected(bList);
    }
    
    public boolean getList(){
        return cbDisplayList.isSelected();
    }
    
/*    public void setSelectionResponse(creator.QTISelectionResponse qtiSelResp){
        if (qtiSelResp!=null) jScrollPane2.setViewportView(qtiSelResp.getPanel());
    }*/ //!
    
    public void setSelectionResponseVector(java.util.Vector vSelectionResponse){
        jList2.setListData(vSelectionResponse);
        changeEnableButtons();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        cbMultiple = new javax.swing.JCheckBox();
        cbFlow = new javax.swing.JCheckBox();
        cbDisplayList = new javax.swing.JCheckBox();
        btAdd = new javax.swing.JButton();
        btModify = new javax.swing.JButton();
        btRemove = new javax.swing.JButton();
        btRemoveAll = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();

        setLayout(new java.awt.GridBagLayout());

        cbMultiple.setText("multiple");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(cbMultiple, gridBagConstraints);

        cbFlow.setText("vertical");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(cbFlow, gridBagConstraints);

        cbDisplayList.setText("llista");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(cbDisplayList, gridBagConstraints);

        btAdd.setText("Afegeix");
        btAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(15, 5, 2, 5);
        add(btAdd, gridBagConstraints);

        btModify.setText("Modifica");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        add(btModify, gridBagConstraints);

        btRemove.setText("Elimina");
        btRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRemoveActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        add(btRemove, gridBagConstraints);

        btRemoveAll.setText("Elimina tots");
        btRemoveAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRemoveAllActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 15, 5);
        add(btRemoveAll, gridBagConstraints);

        jScrollPane2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.8;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jScrollPane2, gridBagConstraints);

        jList2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.4;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        add(jList2, gridBagConstraints);

    }//GEN-END:initComponents

    private void btAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddActionPerformed
        // Add your handling code here:
        String defaultId=qtiItemSelResp.getNextRandomIdent();
        QTISelectionResponse sel=new QTISelectionResponse(qtiItemSelResp,defaultId);
        QTISelectionResponseDialog qsrd=new QTISelectionResponseDialog(ManageFrame.frame,(QTISelectionResponsePanel)sel.getPanel(),true);
        qsrd.show();
        if (qsrd.isOk()) add(sel);
    }//GEN-LAST:event_btAddActionPerformed
    
    private void btRemoveAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRemoveAllActionPerformed
        // Add your handling code here:
        qtiItemSelResp.deleteAll();
    }//GEN-LAST:event_btRemoveAllActionPerformed
    
    private void btRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRemoveActionPerformed
        // Add your handling code here:
        QTISelectionResponse qtiSelResp=(QTISelectionResponse)jList2.getSelectedValue();
        delete(qtiSelResp);
    }//GEN-LAST:event_btRemoveActionPerformed
    
    protected void initComponents2(java.util.Vector vInitialResponses){
        remove(jScrollPane2); //!
        
        setBorder(new javax.swing.border.TitledBorder(Messages.getLocalizedString("PossibleResponses")));
        
        jList2.setListData(vInitialResponses);
        jList2.addListSelectionListener(new javax.swing.event.ListSelectionListener(){
            public void valueChanged(javax.swing.event.ListSelectionEvent e){
                changeEnableButtons();
            }
        });
        btModify.addActionListener(new java.awt.event.ActionListener(){
            public void actionPerformed(java.awt.event.ActionEvent e){
                if (jList2.getSelectedValue()!=null){
                    QTISelectionResponse qtiSelResp=(QTISelectionResponse)jList2.getSelectedValue();
                    QTISelectionResponseDialog qsrd=new QTISelectionResponseDialog(null,(QTISelectionResponsePanel)qtiSelResp.getPanel(),true);
                    qsrd.show();
                    ////if (qsrd.isOk()) add(sel);
                    //! setSelectionResponse(qtiSelResp);
                    //! delete(qtiSelResp); //Perquè no estigui als 2 llocs alhora
                }
            }
        });
        changeEnableButtons();
    }
    
    protected void changeEnableButtons(){
        if (jList2.getSelectedValue()!=null){
            btRemove.setEnabled(true);
            btModify.setEnabled(true);
        }
        else{
            btRemove.setEnabled(false);
            btRemoveAll.setEnabled(false);
            btModify.setEnabled(false);
        }
        if (jList2.getModel().getSize()>0) btRemoveAll.setEnabled(true);
        else btRemoveAll.setEnabled(false);
    }
    
    protected void add(QTISelectionResponse qtiSelResp){
        qtiItemSelResp.addSelectionResponse(qtiSelResp);
    }    
    
    protected void delete(QTISelectionResponse qtiSelResp){
        qtiItemSelResp.delete(qtiSelResp);
    }
    
    protected void initMessages(){
        cbMultiple.setText(Messages.getLocalizedString("Multiple"));
        cbMultiple.setToolTipText(Messages.getLocalizedString("MultipleOptionDesc"));
        
        cbFlow.setText(Messages.getLocalizedString("Vertical"));
        cbFlow.setToolTipText(Messages.getLocalizedString("VerticalOptionDesc"));
        
        cbDisplayList.setText(Messages.getLocalizedString("DisplayList"));
        cbDisplayList.setToolTipText(Messages.getLocalizedString("DisplayListDesc"));
        
        btModify.setText(Messages.getLocalizedString("Modify"));
        btModify.setToolTipText(Messages.getLocalizedString("ModifyOptionDesc"));
        
        btRemove.setText(Messages.getLocalizedString("Remove"));
        btRemove.setToolTipText(Messages.getLocalizedString("RemoveOptionDesc"));
        
        btRemoveAll.setText(Messages.getLocalizedString("RemoveAll"));
        btRemoveAll.setToolTipText(Messages.getLocalizedString("RemoveAllOptionDesc"));
        
        btAdd.setText(Messages.getLocalizedString("Add"));
        btAdd.setToolTipText(Messages.getLocalizedString("AddOptionDesc"));
        
        jScrollPane2.setToolTipText(Messages.getLocalizedString("PossibleResponsesDesc"));
    }
    
    public void setBackground(java.awt.Color c){
        super.setBackground(c);
        if (jScrollPane2!=null) jScrollPane2.setBackground(c);
        java.awt.Color componentColor=CreatorProperties.getComponentColor();
        if (componentColor!=null){
            if (btRemove!=null) btRemove.setBackground(componentColor);
            if (btModify!=null) btModify.setBackground(componentColor);
            if (cbMultiple!=null) cbMultiple.setBackground(componentColor);
            if (btRemoveAll!=null) btRemoveAll.setBackground(componentColor);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btRemove;
    private javax.swing.JButton btAdd;
    private javax.swing.JButton btModify;
    private javax.swing.JCheckBox cbFlow;
    protected javax.swing.JCheckBox cbDisplayList;
    protected javax.swing.JCheckBox cbMultiple;
    private javax.swing.JList jList2;
    private javax.swing.JButton btRemoveAll;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
    
}